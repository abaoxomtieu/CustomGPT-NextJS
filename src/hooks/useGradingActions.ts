import { Question, GradeResult } from "@/types/grade-assignment";
import { gradeAssignmentApiService } from "@/services/grade-assignment-service";
import { toast } from "sonner";

interface UseGradingActionsProps {
  questions: Question[];
  questionFiles: Map<number, File>;
  setIsGrading: (loading: boolean) => void;
  setGradeResults: (results: GradeResult[] | null) => void;
}

export const useGradingActions = ({
  questions,
  questionFiles,
  setIsGrading,
  setGradeResults,
}: UseGradingActionsProps) => {
  
  const submitGrading = async () => {
    if (questions.length === 0 || questionFiles.size === 0) {
      console.error("Vui l√≤ng upload √≠t nh·∫•t m·ªôt file ƒë·ªÉ ch·∫•m ƒëi·ªÉm");
      toast.error("Vui l√≤ng upload √≠t nh·∫•t m·ªôt file ƒë·ªÉ ch·∫•m ƒëi·ªÉm");
      return;
    }

    setIsGrading(true);
    try {
      const questionsWithFiles: string[] = [];
      const filesArray: File[] = [];

      // Ch·ªâ l·∫•y nh·ªØng c√¢u h·ªèi c√≥ file upload
      questionFiles.forEach((file, index) => {
        if (questions[index]) {
          questionsWithFiles.push(questions[index].text);
          filesArray.push(file);
        }
      });

      console.log(
        "üöÄ Submitting grading request with",
        questionsWithFiles.length,
        "questions"
      );

      // S·ª≠ d·ª•ng service thay v√¨ g·ªçi API tr·ª±c ti·∫øp
      const { data: results, error } =
        await gradeAssignmentApiService.gradeAssignment(
          questionsWithFiles,
          filesArray
        );

      if (error) {
        throw new Error(error);
      }

      if (!results) {
        throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ t·ª´ server");
      }

      // Map results with questions
      const mappedResults: GradeResult[] = questionsWithFiles.map(
        (question, index) => ({
          question,
          file_name: filesArray[index].name,
          result: results[index],
        })
      );

      setGradeResults(mappedResults);
      console.log("‚úÖ Ch·∫•m ƒëi·ªÉm th√†nh c√¥ng!");
      toast.success("Ch·∫•m ƒëi·ªÉm th√†nh c√¥ng!");
    } catch (error) {
      console.error("‚ùå Error grading assignment:", error);
      toast.error(
        `C√≥ l·ªói x·∫£y ra khi ch·∫•m ƒëi·ªÉm b√†i t·∫≠p: ${
          error instanceof Error ? error.message : "L·ªói kh√¥ng x√°c ƒë·ªãnh"
        }`
      );
    } finally {
      setIsGrading(false);
    }
  };

  return {
    submitGrading,
  };
};
